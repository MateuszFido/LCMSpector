# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  push:
    branches: [ "nuitka", "main" ]
  pull_request:
    branches: [ "nuitka", "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: false
    - name: Download test data from polybox (Linux/macOS)
      run: |
        mkdir -p tests/
        curl -L -o tests/LCMSpector-sample-data "https://polybox.ethz.ch/index.php/s/f5BXnkYoEgpHtnL/download"
        cd tests/
        if unzip -t LCMSpector-sample-data >/dev/null 2>&1; then
          echo "Archive is a zip file."
          unzip -o LCMSpector-sample-data
        else
          echo "Archive is not a zip file, assuming tar."
          tar xf LCMSpector-sample-data
        fi
        ls -la
      shell: bash
      if: matrix.os != 'windows-latest'
    
    - name: Download test data from polybox (Windows)
      run: |
        New-Item -ItemType Directory -Force -Path tests
        Invoke-WebRequest -Uri "https://polybox.ethz.ch/index.php/s/f5BXnkYoEgpHtnL/download" -OutFile "tests/LCMSpector-sample-data"
        Set-Location tests
        try {
            Expand-Archive -Path "LCMSpector-sample-data" -DestinationPath "." -Force
            Write-Host "Successfully extracted zip archive."
        } catch {
            Write-Host "Failed to extract as zip, trying tar."
            tar.exe xf LCMSpector-sample-data
        }
        Get-ChildItem
      shell: pwsh
      if: matrix.os == 'windows-latest'

    - name: Download MS2 library from polybox (Linux/macOS)
      run: |
        curl -L -o MoNA-export-All_LC-MS-MS_Orbitrap "https://polybox.ethz.ch/index.php/s/CrnWdgwX5canNxL/download"
        if unzip -t MoNA-export-All_LC-MS-MS_Orbitrap >/dev/null 2>&1; then
          echo "Archive is a zip file."
          unzip -o MoNA-export-All_LC-MS-MS_Orbitrap
        else
          echo "Archive is not a zip file, assuming tar."
          tar xf MoNA-export-All_LC-MS-MS_Orbitrap
        fi
        ls -la
        mv MoNA-export-All_LC-MS-MS_Orbitrap.msp lc-inspector/resources
      shell: bash
      if: matrix.os != 'windows-latest'

    - name: Download MS2 library from polybox (Windows)
      run: |
        Invoke-WebRequest -Uri "https://polybox.ethz.ch/index.php/s/CrnWdgwX5canNxL/download" -OutFile "MoNA-export-All_LC-MS-MS_Orbitrap"
        try {
            Expand-Archive -Path MoNA-export-All_LC-MS-MS_Orbitrap -DestinationPath "." -Force
            Write-Host "Successfully extracted zip archive."
        } catch {
            Write-Host "Failed to extract as zip, trying tar."
            tar.exe xf MoNA-export-All_LC-MS-MS_Orbitrap
        }
        Get-ChildItem
        Move-Item -Path "MoNA-export-All_LC-MS-MS_Orbitrap.msp" -Destination "lc-inspector/resources" -Force
      shell: pwsh
      if: matrix.os == 'windows-latest'
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install dependencies (macOS)
      run: |
          pip install pytest flake8
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      shell: bash
      if: matrix.os == 'macOS-latest'

    - name: Install dependencies (Ubuntu)
      run: |
        pip install pytest flake8
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        sudo apt update
        sudo apt install libgl1 libegl1 -y
      shell: bash
      if: matrix.os == 'ubuntu-latest'

    - name: Install dependencies (Windows)
      run: |
        set PYTHONUTF8=1
        pip install pytest flake8
        if exist requirements.txt (
          pip install -r requirements.txt
        )
      shell: cmd
      if: matrix.os == 'windows-latest'
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest -s
