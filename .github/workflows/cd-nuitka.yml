name: Build and Release Executables (Nuitka)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Enter the version (e.g., v1.0.0)"
        required: true

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: false
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Upgrade pip tooling
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Install system deps (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y patchelf zip unzip

      - name: Install runtime dependencies
        run: |
          pip install -r requirements.txt

      - name: Install Nuitka and helpers
        run: |
          pip install --upgrade nuitka zstandard

      # Keep MSP external and present at build time (so it's included as data in one-folder)
      - name: Download the MSP library from Polybox (Linux/macOS)
        run: |
          curl -L -o MoNA-export-All_LC-MS-MS_Orbitrap.zip "https://polybox.ethz.ch/index.php/s/CrnWdgwX5canNxL/download"
          unzip -o MoNA-export-All_LC-MS-MS_Orbitrap.zip
          mkdir -p lc-inspector/resources
          mv -f MoNA-export-All_LC-MS-MS_Orbitrap.msp lc-inspector/resources
        shell: bash
        if: matrix.os != 'windows-latest'

      - name: Download the MSP library from Polybox (Windows)
        run: |
          New-Item -ItemType Directory -Force -Path lc-inspector\resources | Out-Null
          Invoke-WebRequest -Uri "https://polybox.ethz.ch/index.php/s/CrnWdgwX5canNxL/download" -OutFile "MoNA-export-All_LC-MS-MS_Orbitrap.zip"
          Expand-Archive -Path "MoNA-export-All_LC-MS-MS_Orbitrap.zip" -DestinationPath "." -Force
          Move-Item -Path "MoNA-export-All_LC-MS-MS_Orbitrap.msp" -Destination "lc-inspector\resources" -Force
        shell: pwsh
        if: matrix.os == 'windows-latest'

      - name: Build with Nuitka (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          python -m nuitka lc-inspector/main.py \
            --standalone \
            --plugin-enable=pyside6 \
            --noinclude-qt-translations \
            --include-data-dir="lc-inspector/resources"=resources \
            --macos-create-app-bundle \
            --macos-app-name=LCMSpector \
            --macos-app-icon="lc-inspector/resources/icon.icns" \
            --output-dir=dist

          # Zip the .app bundle for release
          cd dist
          # Failsafe for if Nuitka still somehow wrongly produces "main.app" 
          mv main.app LCMSpector.app
          zip -r "LCMSpector-${{ github.event.inputs.version }}-macOS-arm64.zip" LCMSpector.app

      - name: Build with Nuitka (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m nuitka lc-inspector\main.py `
            --standalone `
            --plugin-enable=pyside6 `
            --noinclude-qt-translations `
            --include-data-dir="lc-inspector/resources"=resources `
            --windows-console-mode=disable `
            --output-filename=LCMSpector `
            --output-dir=dist

          # Zip the .dist folder (contains LCMSpector.exe and libs)
          Get-ChildItem -Force
          Rename-Item -Path "dist\main.dist" -NewName "dist\LCMSpector.dist"
          Compress-Archive -Path dist\LCMSpector.dist\* -DestinationPath "dist\LCMSpector-${{ github.event.inputs.version }}-Win11-x86_64.zip" -Force

      - name: Build with Nuitka (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          python -m nuitka lc-inspector/main.py \
            --standalone \
            --plugin-enable=pyside6 \
            --noinclude-qt-translations \
            --include-data-dir="lc-inspector/resources"=resources \
            --output-filename=LCMSpector \
            --output-dir=dist

          # Tar.gz the .dist folder
          cd dist
          mv main.dist LCMSpector.dist
          tar -czf "LCMSpector-${{ github.event.inputs.version }}-Linux-x86_64.tar.gz" LCMSpector.dist

      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: LCMSpector-${{ github.event.inputs.version }}-macOS-arm64.zip
          path: dist/LCMSpector-${{ github.event.inputs.version }}-macOS-arm64.zip
          if-no-files-found: error

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: LCMSpector-${{ github.event.inputs.version }}-Win11-x86_64.zip
          path: dist/LCMSpector-${{ github.event.inputs.version }}-Win11-x86_64.zip
          if-no-files-found: error

      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: LCMSpector-${{ github.event.inputs.version }}-Linux-x86_64.tar.gz
          path: dist/LCMSpector-${{ github.event.inputs.version }}-Linux-x86_64.tar.gz
          if-no-files-found: error
